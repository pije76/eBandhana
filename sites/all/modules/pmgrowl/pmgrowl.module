<?php
// $Id: pmgrowl.module,v 1.2.2.1 2010/01/17 13:45:41 berdir Exp $

/**
 * @file
 * pmgrowl provides private message received notifications using the jGrowl jQuery plugin
 */

/**
 * Implementation of hook_init().
 */
function pmgrowl_init() {
  if (user_access('read privatemsg')) {
    // Add required files
    drupal_add_css(drupal_get_path('module', 'pmgrowl') .'/jgrowl/jquery.jgrowl.css');
    drupal_add_js(drupal_get_path('module', 'pmgrowl') .'/jgrowl/jquery.jgrowl_minimized.js', 'module', 'footer');
    drupal_add_js(drupal_get_path('module', 'pmgrowl') .'/pmgrowl.js', 'module', 'footer');

    // Pass in the interval for checking messages. Multiply by 1000 to move to milliseconds instead of seconds
    drupal_add_js(array('pmGrowlInterval' => variable_get('pmgrowl_interval', 30) * 1000), 'setting');
  }
}

/**
 * Implementation of hook_menu().
 */
function pmgrowl_menu() {
  $items['admin/settings/messages/pmgrowl'] = array(
    'title' => 'Growl notifications',
    'description' => 'Change the notification settings for private message alerts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmgrowl_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['messages/pmgrowl_json'] = array(
    'access callback' => 'user_access',
    'access arguments' => array('read privatemsg'),
    'page callback' => 'pmgrowl_json',
    'type' => MENU_CALLBACK,
  );
  $items['messages/pmgrowl_close'] = array(
    'page callback' => 'pmgrowl_close',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Callback function to store a user's request to close a message alert
 */
function pmgrowl_close() {
  global $user;

  pmgrowl_close_message($user->uid, $_POST['mid']);
}

/**
 * Mark a message as closed.
 *
 * @param $uid
 *   User id of the user for which the message should be closed.
 * @param $mid
 *   Message id that should be closed.
 */
function pmgrowl_close_message($uid, $mid = NULL) {
  // Build a record containing the generic information.
  $table = 'pmgrowl_close';
  $record = new stdClass();
  $record->uid = $uid;
  $record->closed = 1;

  if (variable_get('pmgrowl_operating_mode', 0) == 0 && $mid) {
    // Check if the record has not been entered. Avoid duplicate key errors.
    $sql = "SELECT 1 FROM {pmgrowl_close} WHERE mid = %d AND uid = %d";
    if (!db_result(db_query($sql, $mid, $uid))) {
      // Add mid to the record and store
      $record->mid = $mid;
      return drupal_write_record($table, $record);
    }
  }
  else {
    // Check if there is already an entry for the active user.
    $sql = "SELECT 1 FROM {pmgrowl_close} WHERE uid = %d";
    if (db_result(db_query($sql, $uid))) {
      // Update existing entry.
      drupal_write_record($table, $record, 'uid');
    }
    else {
      // Update existing entry.
      drupal_write_record($table, $record);
    }
  }
}

/**
 * Query function to build a query that can be extended/altered.
 *
 * @param $fragments
 *   Query fragment array.
 * @param $account
 *   User account for which the messages are loaded.
 */
function pmgrowl_sql_unclosed(&$fragments, $account) {
  // Set the primary table.
  $fragments['primary_table'] = '{pm_index} pmi';

  // Add all necessary fields.
  $fragments['select']['thread_id'] = 'pmi.thread_id';
  $fragments['select']['mid'] = 'pmi.mid';
  $fragments['select']['subject'] = 'pm.subject';
  $fragments['select']['body'] = 'pm.body';
  $fragments['select']['format'] = 'pm.format';

  // Add join to {pm_message}
  $fragments['inner_join']['pm_message'] = 'INNER JOIN {pm_message} pm ON (pmi.mid = pm.mid)';

  // Select only messages of the current user.
  $fragments['where'][] = 'pmi.uid = %d';
  $fragments['query_args']['where'][] = $account->uid;

  // Select only new messages that are not deleted.
  $fragments['where'][] = 'pmi.is_new = 1';
  $fragments['where'][] = 'pmi.deleted = 0';

  // Select only messages that are not already closed.
  $fragments['where'][] = 'pmi.mid NOT IN (SELECT mid FROM {pmgrowl_close} WHERE uid = %d AND closed = 1)';
  $fragments['query_args']['where'][] = $account->uid;

  // Sometimes recipients are listed more than once, group by mid.
  $fragements['group_by'][] = 'pmi.mid';

  // Sort by timestamp.
  $fragements['order_by'][] = 'pm.timestamp ASC';
}

/**
 * Callback function for retrieving new messages in json format
 */
function pmgrowl_json() {
  global $user;

  // Check the operating mode, and return a message accordingly.
  if (variable_get('pmgrowl_operating_mode', 0) == 0) {
    // Assemble the query to load the messages.
    $query = _privatemsg_assemble_query(array('unclosed', 'pmgrowl'), $user);
    $result = db_query($query['query']);
    $data = array();

    while ($row = db_fetch_object($result)) {
      $row->body = check_markup(truncate_utf8($row->body, 400, FALSE, TRUE), $row->format, FALSE);
      $row->body .= '<p>' . l(t('Open & Reply'), 'messages/view/' . $row->thread_id, array('fragment' => 'privatemsg-mid-' . $row->mid));
      $row->body .= ' | ' . l(t('View All'), 'messages') .'</p>';
      $data[] = $row;

      // If auto-close is enabled, mark messages as closed.
      if (variable_get('pmgrowl_persistence', 0) == 0) {
        pmgrowl_close_message($user->uid, $row->mid);
      }
    }
  }
  else {
    if ($unread = privatemsg_unread_count()) {
      $message['subject'] = t('You have mail!');
      $message['body'] = '<p>' . t('You have received a !received_messages_link!', array('!received_messages_link' => l(t('new message'), 'messages'))) . '</p>';
      $message['body'] .= '<p>' . t('You have @unread_message_count @unread_messages.', array('@unread_message_count' => $unread, '@unread_messages' => format_plural($unread, 'unread message', 'unread messages'))) . '</p>';
      $data[0] = $message;

      // If auto-close is enabled, mark all messages as closed.
      // @todo: This does not have any effect.
      if (variable_get('pmgrowl_persistence', 0) == 0) {
        pmgrowl_close_message($user->uid);
      }
    }
  }

  drupal_json($data);
}

/**
 * Form builder. Configure pmgrowl settings.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function pmgrowl_admin_settings() {
  $form['pmgrowl_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Check message interval'),
    '#default_value' => variable_get('pmgrowl_interval', 30),
    '#description' => t('Choose the number of seconds between checks for new messages. Set this to 0 if you only want to check for new messages when the page first loads.'),
  );
  $form['pmgrowl_operating_mode'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('pmgrowl_operating_mode', 0),
    '#options' => array(t('Individual Messages'), t('New Message alert')),
    '#title' => t('Operating Mode'),
    '#description' => t('Choose the way messages should be alerted. Individual Messages mode will give you every new message that comes in. New Message alert will just give a notification that there are new messages.'),
  );
  $form['pmgrowl_persistence'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('pmgrowl_persistence', 0),
    '#options' => array(t('One time'), t('Close manually')),
    '#title' => t('Message persistence'),
    '#description' => t('<em>This setting only applies to Operating mode "New Message alert".</em> If you choose "One time", then the message will appear only once. "Close manually" means that the message will continue to appear every time a page is loaded until the user closes it themselves.'),
  );

  return system_settings_form($form);
}

/**
 * Validate the pmgrowl settings configuration form.
 */
function pmgrowl_admin_settings_validate($form, $form_state) {
  $interval = $form_state['values']['pmgrowl_interval'];
  if (!is_numeric($interval)) {
    form_set_error('pmgrowl_interval', t('Please enter a number.'));
  }
}
